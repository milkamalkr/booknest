Write a FastAPI route GET /books that:

Lists all books from a PostgreSQL database

Supports optional query filters: title, author, status

Is accessible to any authenticated user (via JWT)

Uses Pydantic for request/response models

Uses a router inside routers/books.py

Gets database connection via db.get_connection()

Uses a dependency get_current_user() to validate the JWT

Returns JSON list of books with owner and current renter names (joined from users table)

Paginate the results (limit, offset)

Sort results by title or date added

Use psycopg2 with RealDictCursor

Return total count of books matching filters



Write a FastAPI route GET /books/{id} that:

Returns the details of a book with provided id from a PostgreSQL database
Is accessible to any authenticated user (via JWT)
Uses Pydantic for request/response models
Uses a router inside routers/books.py
Gets database connection via db.get_connection()
Uses a dependency get_current_user() to validate the JWT
Returns JSON with all details available in the DB

Write a FastAPI route PATCH /books/{id} that:

Updates book details in a PostgreSQL database using psycopg2
Accepts JSON body to update status and/or current_renter_id
Validates that only admin users can access this route
Uses a dependency get_current_user() which returns the logged-in user (with is_admin: bool)
Uses a Pydantic model (BookUpdate) with optional fields status, current_renter_id. 
Is implemented inside a file routers/books.py
Uses a database connection from db.get_connection()
Returns the updated book or an appropriate error if book is not found or user is not admin
Add pydantic models in books_model.py module
Validate that the status can only be one of ["available", "rented", "pending"]
Validate that current_renter_id (if provided) is a valid user ID in the users table
Return error messages if validations fail



Write a FastAPI route POST /books/{id}/request that:

Lets any authenticated user submit a rent request for a book
Uses book_id from path, current user from get_current_user()
Validates:
Book exists
User is not the owner of the book
User does not already have a rent request for this book (pending/accepted)
Inserts into rent_requests: book_id, renter_id, status = 'pending', request_date = NOW()

Also inserts into rental_history:
book_id, renter_id, status = 'pending', rented_by_owner_id = NULL, rent_start = NOW()
Uses psycopg2 and RealDictCursor
Is located in routers/books.py

Uses dependency get_current_user() for JWT user
Returns success or clear error if duplicate request exists

ðŸ§¾ Additional Prompts for Related API Adjustments
âœ… Write a FastAPI route /rent-requests/{id}/accept (PATCH)
Update /rent-requests/{id}/accept to:
Allow only the book owner to accept a request
Update the selected rent_request status to 'accepted'
Set the corresponding book.status = 'rented' and book.current_renter_id
Update the latest matching row in rental_history to status = 'rented'
If the user is in the waitlist for this book, remove the accepted user from waitlists for this book
Leave other users in waitlist and their requests as is

âœ… Prompt for /books/{id}/return (PATCH)

Implement a FastAPI route PATCH /books/{id}/return that:

Allows only the book owner (not admin, not renter) to mark the book as returned
Uses book_id from the URL and get_current_user() to identify the user
Connects to PostgreSQL using psycopg2 and RealDictCursor

Performs the following steps:
Fetch the book by id and validate it exists
Verify the current user is the owner of the book
Check that the book's current status is 'rented'
Set the book's status to 'available' and current_renter_id = NULL
Update the latest rental_history row for that book and renter:
Set status = 'returned'
Set rent_end = NOW()
Return a success message if update is successful, otherwise appropriate errors (e.g., 403, 404)
Place the route inside routers/books.py

Optionally log or simulate a notification to all users in the waitlists for that book


Write a FastAPI route GET /books/{id}/rent-cost that:

Allows only the book owner to access it
Uses book_id as a path parameter
Fetches the latest rental_history row for that book (ordered by rent_start DESC)
Joins books table to get rent_per_week
If rental_history.status = 'rented', use NOW() as rent_end
Calculates:
days = rent_end - rent_start
weeks = ceil(days / 7)
total_rent = weeks * rent_per_week
Returns:
{
  "book_id": "<uuid>",
  "renter_id": "<uuid>",
  "weeks": <int>,
  "total_rent": <int>,
  "status": "<rented|returned>",
  "days": <int>
}
Uses psycopg2 with RealDictCursor
Uses get_current_user() for JWT authentication and access check
Route should be placed in routers/books.py

Write a FastAPI route GET /rent-requests/my-outgoing that:

Returns a list of all rent requests made by the currently authenticated user (renter)
Is accessible to any authenticated user using a dependency get_current_user()
Joins the rent_requests, books, and users tables to include:
request_id
book_id
book_title
book_owner_id
status (pending, accepted, declined)
request_date
Number of weeks requested: use rental_history.rent_start and rent_end or NOW() if still ongoing, then apply ceil(days / 7)
Orders the results by request_date descending
Uses psycopg2 with RealDictCursor
Implements route inside routers/rent_requests.py
Returns list of results in this format:
[
  {
    "request_id": "uuid",
    "book_id": "uuid",
    "book_title": "string",
    "book_owner_id": "uuid",
    "status": "pending",
    "request_date": "ISODate",
    "weeks": 2
  },
  ...
]
Add book image URL
Filter by request status
Add pagination



book owner
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJib29rb3duZXJAYm9va25lc3QuY29tIiwiaWQiOiJmMjQxNjA3NC1mZmU0LTQ1ODUtYjAyYy0xMTc0ZThmNGE1YjgiLCJleHAiOjE3NTE4MjE3MzZ9.gzjcmR10YHGHmARUp6N2gasyyiCfposQHML0LiSc-fA

Renterer
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJSZW50ZXJlckBib29rbmVzdC5jb20iLCJpZCI6IjRhYjUwZTA0LTljZjAtNDA1Zi05ZWEyLTMzNWZhODI5Mjc3ZCIsImV4cCI6MTc1MTgyMjAwNH0.V1GcyrN_PCglGlgYqoxGASnDr0-1sicuoKbdD4s1OKI

9ffb897f-9005-4181-879e-e2c96071b5af req id for book4

admin 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbkBib29rbmVzdC5jb20iLCJpZCI6IjU1YjkwNGZjLTE2YTctNDkwOS05ZWYxLTczNGFmOTY5ZTk4NiIsImV4cCI6MTc1MTgyMTc3OH0.VyN93SxIQIOBhdjs9mD4vcOs8JIb8MvV_4NxYxeReZI

SELECT
    rh.rent_start,
    rh.rent_end,
    rh.status AS rental_status,
    rh.renter_id,
    rr.*
FROM
    rental_history rh
JOIN
    rent_requests rr
    ON rh.book_id = rr.book_id AND rh.renter_id = rr.renter_id
WHERE
    rh.book_id = %s
ORDER BY
    rh.rent_start DESC;


