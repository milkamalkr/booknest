Write a FastAPI route GET /books that:

Lists all books from a PostgreSQL database

Supports optional query filters: title, author, status

Is accessible to any authenticated user (via JWT)

Uses Pydantic for request/response models

Uses a router inside routers/books.py

Gets database connection via db.get_connection()

Uses a dependency get_current_user() to validate the JWT

Returns JSON list of books with owner and current renter names (joined from users table)

Paginate the results (limit, offset)

Sort results by title or date added

Use psycopg2 with RealDictCursor

Return total count of books matching filters



Write a FastAPI route GET /books/{id} that:

Returns the details of a book with provided id from a PostgreSQL database
Is accessible to any authenticated user (via JWT)
Uses Pydantic for request/response models
Uses a router inside routers/books.py
Gets database connection via db.get_connection()
Uses a dependency get_current_user() to validate the JWT
Returns JSON with all details available in the DB

Write a FastAPI route PATCH /books/{id} that:

Updates book details in a PostgreSQL database using psycopg2
Accepts JSON body to update status and/or current_renter_id
Validates that only admin users can access this route
Uses a dependency get_current_user() which returns the logged-in user (with is_admin: bool)
Uses a Pydantic model (BookUpdate) with optional fields status, current_renter_id. 
Is implemented inside a file routers/books.py
Uses a database connection from db.get_connection()
Returns the updated book or an appropriate error if book is not found or user is not admin
Add pydantic models in books_model.py module
Validate that the status can only be one of ["available", "rented", "pending"]
Validate that current_renter_id (if provided) is a valid user ID in the users table
Return error messages if validations fail



Write a FastAPI route POST /books/{id}/request that:

Lets any authenticated user submit a rent request for a book
Uses book_id from path, current user from get_current_user()
Validates:
Book exists
User is not the owner of the book
User does not already have a rent request for this book (pending/accepted)
Inserts into rent_requests: book_id, renter_id, status = 'pending', request_date = NOW()

Also inserts into rental_history:
book_id, renter_id, status = 'pending', rented_by_owner_id = NULL, rent_start = NOW()
Uses psycopg2 and RealDictCursor
Is located in routers/books.py

Uses dependency get_current_user() for JWT user
Returns success or clear error if duplicate request exists

ðŸ§¾ Additional Prompts for Related API Adjustments
âœ… Prompt for /rent-requests/{id}/accept (PATCH)
Update /rent-requests/{id}/accept to:

Allow only the book owner to accept a request

Update the selected rent_request status to 'accepted'

Set the corresponding book.status = 'rented' and book.current_renter_id

Update the latest matching row in rental_history to status = 'rented'

Remove the accepted user from waitlists for this book

Leave other users in waitlist and their requests as is

âœ… Prompt for /books/{id}/return (PATCH)
Update /books/{id}/return to:

Allow only book owner or admin to mark book as returned

Set book.status = 'available' and book.current_renter_id = NULL

Update the latest rental_history record (status: 'rented') for this book to status = 'returned', rent_end = NOW()

Send notification (print/log or background job) to all users in waitlist for this book to invite them to submit a rent request